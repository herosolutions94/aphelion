{"ast":null,"code":"import _objectSpread from\"/Users/macbook/Desktop/aphelion/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/macbook/Desktop/aphelion/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{useLocation}from'react-router-dom';import{getSiteImages,metaTags,getServerImage,getData}from'../../helpers/api';import Cover from\"../common/Cover\";import BlogPosts from\"./section/BlogPosts\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function BlogCat(){var location=useLocation();var pathname=location.pathname;var url_arr=pathname.split(\"/\");var cat_id=url_arr['2'];var ser_slug=url_arr['3'];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),state=_useState4[0],setState=_useState4[1];useEffect(function(){window.scrollTo(0,3);getData(\"cat-page\",cat_id+\"/\"+ser_slug).then(function(data){setState(_objectSpread(_objectSpread({},state),{},{content:data.content,metatags:data.metatags,categories:data.categories,blogs:data.blogs}));setLoading(true);});},[]);var content=state.content;if(loading===false)return/*#__PURE__*/_jsxs(\"div\",{id:\"loading\",children:[\" \",/*#__PURE__*/_jsx(\"img\",{src:getSiteImages('/images/loading.gif'),alt:\"Loading\"})]});var blog={cover:{sec_bg:getServerImage('uploads/categories/',content.image,'thumb_'),heading:content.title},posts:{block:state.blogs,category:{title:\"Categories\",ul:state.categories}}};return/*#__PURE__*/_jsxs(_Fragment,{children:[metaTags(state.metatags),/*#__PURE__*/_jsx(Cover,{data:blog.cover}),/*#__PURE__*/_jsx(BlogPosts,{data:blog.posts})]});}export default BlogCat;","map":{"version":3,"sources":["/Users/macbook/Desktop/aphelion/src/components/pages/BlogCat.jsx"],"names":["React","useState","useEffect","useLocation","getSiteImages","metaTags","getServerImage","getData","Cover","BlogPosts","BlogCat","location","pathname","url_arr","split","cat_id","ser_slug","loading","setLoading","state","setState","window","scrollTo","then","data","content","metatags","categories","blogs","blog","cover","sec_bg","image","heading","title","posts","block","category","ul"],"mappings":"yOAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,aAAT,CAAwBC,QAAxB,CAAkCC,cAAlC,CAAkDC,OAAlD,KAAiE,mBAAjE,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,qBAAtB,C,6IAEA,QAASC,CAAAA,OAAT,EAAmB,CACf,GAAIC,CAAAA,QAAQ,CAAGR,WAAW,EAA1B,CACA,GAAIS,CAAAA,QAAQ,CAAGD,QAAQ,CAACC,QAAxB,CACA,GAAIC,CAAAA,OAAO,CAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAd,CACA,GAAIC,CAAAA,MAAM,CAAGF,OAAO,CAAC,GAAD,CAApB,CACA,GAAIG,CAAAA,QAAQ,CAAGH,OAAO,CAAC,GAAD,CAAtB,CACA,cAA8BZ,QAAQ,CAAC,KAAD,CAAtC,wCAAOgB,OAAP,eAAgBC,UAAhB,eACA,eAA0BjB,QAAQ,CAAC,EAAD,CAAlC,yCAAOkB,KAAP,eAAcC,QAAd,eAGAlB,SAAS,CAAC,UAAM,CACZmB,MAAM,CAACC,QAAP,CAAgB,CAAhB,CAAmB,CAAnB,EACAf,OAAO,CAAC,UAAD,CAAaQ,MAAM,CAAG,GAAT,CAAeC,QAA5B,CAAP,CAA6CO,IAA7C,CAAkD,SAACC,IAAD,CAAU,CACxDJ,QAAQ,gCACDD,KADC,MAEJM,OAAO,CAAED,IAAI,CAACC,OAFV,CAGJC,QAAQ,CAAEF,IAAI,CAACE,QAHX,CAIJC,UAAU,CAAEH,IAAI,CAACG,UAJb,CAKJC,KAAK,CAAEJ,IAAI,CAACI,KALR,GAAR,CAOAV,UAAU,CAAC,IAAD,CAAV,CACH,CATD,EAUH,CAZQ,CAYN,EAZM,CAAT,CAaA,GAAIO,CAAAA,OAAO,CAAGN,KAAK,CAACM,OAApB,CACA,GAAIR,OAAO,GAAK,KAAhB,CAAuB,mBAAO,aAAK,EAAE,CAAC,SAAR,4BAAmB,YAAK,GAAG,CAAEb,aAAa,CAAC,qBAAD,CAAvB,CAAgD,GAAG,CAAC,SAApD,EAAnB,GAAP,CAEvB,GAAMyB,CAAAA,IAAI,CAAG,CACTC,KAAK,CAAE,CACHC,MAAM,CAAEzB,cAAc,CAAC,qBAAD,CAAwBmB,OAAO,CAACO,KAAhC,CAAuC,QAAvC,CADnB,CAEHC,OAAO,CAAER,OAAO,CAACS,KAFd,CADE,CAKTC,KAAK,CAAE,CACHC,KAAK,CAAEjB,KAAK,CAACS,KADV,CAEHS,QAAQ,CAAE,CACNH,KAAK,CAAE,YADD,CAENI,EAAE,CAAEnB,KAAK,CAACQ,UAFJ,CAFP,CALE,CAAb,CAaA,mBACI,2BACKtB,QAAQ,CAACc,KAAK,CAACO,QAAP,CADb,cAEI,KAAC,KAAD,EAAO,IAAI,CAAEG,IAAI,CAACC,KAAlB,EAFJ,cAGI,KAAC,SAAD,EAAW,IAAI,CAAED,IAAI,CAACM,KAAtB,EAHJ,GADJ,CAOH,CAED,cAAezB,CAAAA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from 'react-router-dom';\nimport { getSiteImages, metaTags, getServerImage, getData } from '../../helpers/api';\nimport Cover from \"../common/Cover\";\nimport BlogPosts from \"./section/BlogPosts\";\n\nfunction BlogCat() {\n    let location = useLocation();\n    let pathname = location.pathname;\n    let url_arr = pathname.split(\"/\");\n    let cat_id = url_arr['2'];\n    let ser_slug = url_arr['3'];\n    const [loading, setLoading] = useState(false);\n    const [state, setState] = useState({\n\n    });\n    useEffect(() => {\n        window.scrollTo(0, 3)\n        getData(\"cat-page\", cat_id + \"/\" + ser_slug).then((data) => {\n            setState({\n                ...state,\n                content: data.content,\n                metatags: data.metatags,\n                categories: data.categories,\n                blogs: data.blogs,\n            });\n            setLoading(true);\n        });\n    }, []);\n    let content = state.content;\n    if (loading === false) return <div id=\"loading\"> <img src={getSiteImages('/images/loading.gif')} alt=\"Loading\" /></div>;\n\n    const blog = {\n        cover: {\n            sec_bg: getServerImage('uploads/categories/', content.image, 'thumb_'),\n            heading: content.title,\n        },\n        posts: {\n            block: state.blogs,\n            category: {\n                title: \"Categories\",\n                ul: state.categories,\n            },\n        },\n    };\n    return (\n        <>\n            {metaTags(state.metatags)}\n            <Cover data={blog.cover} />\n            <BlogPosts data={blog.posts} />\n        </>\n    );\n}\n\nexport default BlogCat;\n"]},"metadata":{},"sourceType":"module"}